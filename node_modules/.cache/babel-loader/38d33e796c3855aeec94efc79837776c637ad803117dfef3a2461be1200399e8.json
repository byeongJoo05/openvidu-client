{"ast":null,"code":"\"use strict\";\n\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Subscriber = void 0;\nvar StreamManager_1 = require(\"./StreamManager\");\nvar OpenViduLogger_1 = require(\"../OpenViduInternal/Logger/OpenViduLogger\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Packs remote media streams. Participants automatically receive them when others publish their streams. Initialized with {@link Session.subscribe} method\n *\n * See available event listeners at {@link StreamManagerEventMap}.\n */\nvar Subscriber = /** @class */function (_super) {\n  __extends(Subscriber, _super);\n  /**\n   * @hidden\n   */\n  function Subscriber(stream, targEl, properties) {\n    var _this = _super.call(this, stream, targEl) || this;\n    _this.element = _this.targetElement;\n    _this.stream = stream;\n    _this.properties = properties;\n    return _this;\n  }\n  /**\n   * Subscribe or unsubscribe from the audio stream (if available). Calling this method twice in a row passing same value will have no effect\n   * @param value `true` to subscribe to the audio stream, `false` to unsubscribe from it\n   */\n  Subscriber.prototype.subscribeToAudio = function (value) {\n    this.stream.getMediaStream().getAudioTracks().forEach(function (track) {\n      track.enabled = value;\n    });\n    this.stream.audioActive = value;\n    logger.info(\"'Subscriber' has \" + (value ? 'subscribed to' : 'unsubscribed from') + ' its audio stream');\n    return this;\n  };\n  /**\n   * Subscribe or unsubscribe from the video stream (if available). Calling this method twice in a row passing same value will have no effect\n   * @param value `true` to subscribe to the video stream, `false` to unsubscribe from it\n   */\n  Subscriber.prototype.subscribeToVideo = function (value) {\n    this.stream.getMediaStream().getVideoTracks().forEach(function (track) {\n      track.enabled = value;\n    });\n    this.stream.videoActive = value;\n    logger.info(\"'Subscriber' has \" + (value ? 'subscribed to' : 'unsubscribed from') + ' its video stream');\n    return this;\n  };\n  /* Hidden methods */\n  /**\n   * @hidden\n   */\n  Subscriber.prototype.replaceTrackInMediaStream = function (track, updateLastConstraints) {\n    var mediaStream = this.stream.getMediaStream();\n    var removedTrack;\n    if (track.kind === 'video') {\n      removedTrack = mediaStream.getVideoTracks()[0];\n      if (updateLastConstraints) {\n        this.stream.lastVideoTrackConstraints = track.getConstraints();\n      }\n    } else {\n      removedTrack = mediaStream.getAudioTracks()[0];\n    }\n    mediaStream.removeTrack(removedTrack);\n    removedTrack.stop();\n    mediaStream.addTrack(track);\n  };\n  return Subscriber;\n}(StreamManager_1.StreamManager);\nexports.Subscriber = Subscriber;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;AAEA;AAEA;;;AAGA,IAAMA,MAAM,GAAmBC,+BAAc,CAACC,WAAW,EAAE;AAE3D;;;;;AAKA;EAAgCC;EAM5B;;;EAGA,oBAAYC,MAAc,EAAEC,MAAwC,EAAEC,UAAgC;IAAtG,YACIC,kBAAMH,MAAM,EAAEC,MAAM,CAAC;IACrBG,KAAI,CAACC,OAAO,GAAGD,KAAI,CAACE,aAAa;IACjCF,KAAI,CAACJ,MAAM,GAAGA,MAAM;IACpBI,KAAI,CAACF,UAAU,GAAGA,UAAU;;EAChC;EAEA;;;;EAIAK,qCAAgB,GAAhB,UAAiBC,KAAc;IAC3B,IAAI,CAACR,MAAM,CACNS,cAAc,EAAE,CAChBC,cAAc,EAAE,CAChBC,OAAO,CAAC,UAACC,KAAK;MACXA,KAAK,CAACC,OAAO,GAAGL,KAAK;IACzB,CAAC,CAAC;IACN,IAAI,CAACR,MAAM,CAACc,WAAW,GAAGN,KAAK;IAC/BZ,MAAM,CAACmB,IAAI,CAAC,mBAAmB,IAAIP,KAAK,GAAG,eAAe,GAAG,mBAAmB,CAAC,GAAG,mBAAmB,CAAC;IACxG,OAAO,IAAI;EACf,CAAC;EAED;;;;EAIAD,qCAAgB,GAAhB,UAAiBC,KAAc;IAC3B,IAAI,CAACR,MAAM,CACNS,cAAc,EAAE,CAChBO,cAAc,EAAE,CAChBL,OAAO,CAAC,UAACC,KAAK;MACXA,KAAK,CAACC,OAAO,GAAGL,KAAK;IACzB,CAAC,CAAC;IACN,IAAI,CAACR,MAAM,CAACiB,WAAW,GAAGT,KAAK;IAC/BZ,MAAM,CAACmB,IAAI,CAAC,mBAAmB,IAAIP,KAAK,GAAG,eAAe,GAAG,mBAAmB,CAAC,GAAG,mBAAmB,CAAC;IACxG,OAAO,IAAI;EACf,CAAC;EAED;EAEA;;;EAGAD,8CAAyB,GAAzB,UAA0BK,KAAuB,EAAEM,qBAA8B;IAC7E,IAAMC,WAAW,GAAgB,IAAI,CAACnB,MAAM,CAACS,cAAc,EAAE;IAC7D,IAAIW,YAA8B;IAClC,IAAIR,KAAK,CAACS,IAAI,KAAK,OAAO,EAAE;MACxBD,YAAY,GAAGD,WAAW,CAACH,cAAc,EAAE,CAAC,CAAC,CAAC;MAC9C,IAAIE,qBAAqB,EAAE;QACvB,IAAI,CAAClB,MAAM,CAACsB,yBAAyB,GAAGV,KAAK,CAACW,cAAc,EAAE;;KAErE,MAAM;MACHH,YAAY,GAAGD,WAAW,CAACT,cAAc,EAAE,CAAC,CAAC,CAAC;;IAElDS,WAAW,CAACK,WAAW,CAACJ,YAAY,CAAC;IACrCA,YAAY,CAACK,IAAI,EAAE;IACnBN,WAAW,CAACO,QAAQ,CAACd,KAAK,CAAC;EAC/B,CAAC;EACL,iBAAC;AAAD,CAAC,CApE+Be,6BAAa;AAAhCC","names":["logger","OpenViduLogger_1","getInstance","__extends","stream","targEl","properties","_super","_this","element","targetElement","Subscriber","value","getMediaStream","getAudioTracks","forEach","track","enabled","audioActive","info","getVideoTracks","videoActive","updateLastConstraints","mediaStream","removedTrack","kind","lastVideoTrackConstraints","getConstraints","removeTrack","stop","addTrack","StreamManager_1","exports"],"sources":["C:\\Users\\user\\Desktop\\openvidu-client\\node_modules\\openvidu-browser\\src\\OpenVidu\\Subscriber.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Stream } from './Stream';\nimport { StreamManager } from './StreamManager';\nimport { SubscriberProperties } from '../OpenViduInternal/Interfaces/Public/SubscriberProperties';\nimport { OpenViduLogger } from '../OpenViduInternal/Logger/OpenViduLogger';\n\n/**\n * @hidden\n */\nconst logger: OpenViduLogger = OpenViduLogger.getInstance();\n\n/**\n * Packs remote media streams. Participants automatically receive them when others publish their streams. Initialized with {@link Session.subscribe} method\n *\n * See available event listeners at {@link StreamManagerEventMap}.\n */\nexport class Subscriber extends StreamManager {\n    /**\n     * @hidden\n     */\n    properties: SubscriberProperties;\n\n    /**\n     * @hidden\n     */\n    constructor(stream: Stream, targEl: string | HTMLElement | undefined, properties: SubscriberProperties) {\n        super(stream, targEl);\n        this.element = this.targetElement;\n        this.stream = stream;\n        this.properties = properties;\n    }\n\n    /**\n     * Subscribe or unsubscribe from the audio stream (if available). Calling this method twice in a row passing same value will have no effect\n     * @param value `true` to subscribe to the audio stream, `false` to unsubscribe from it\n     */\n    subscribeToAudio(value: boolean): Subscriber {\n        this.stream\n            .getMediaStream()\n            .getAudioTracks()\n            .forEach((track) => {\n                track.enabled = value;\n            });\n        this.stream.audioActive = value;\n        logger.info(\"'Subscriber' has \" + (value ? 'subscribed to' : 'unsubscribed from') + ' its audio stream');\n        return this;\n    }\n\n    /**\n     * Subscribe or unsubscribe from the video stream (if available). Calling this method twice in a row passing same value will have no effect\n     * @param value `true` to subscribe to the video stream, `false` to unsubscribe from it\n     */\n    subscribeToVideo(value: boolean): Subscriber {\n        this.stream\n            .getMediaStream()\n            .getVideoTracks()\n            .forEach((track) => {\n                track.enabled = value;\n            });\n        this.stream.videoActive = value;\n        logger.info(\"'Subscriber' has \" + (value ? 'subscribed to' : 'unsubscribed from') + ' its video stream');\n        return this;\n    }\n\n    /* Hidden methods */\n\n    /**\n     * @hidden\n     */\n    replaceTrackInMediaStream(track: MediaStreamTrack, updateLastConstraints: boolean): void {\n        const mediaStream: MediaStream = this.stream.getMediaStream();\n        let removedTrack: MediaStreamTrack;\n        if (track.kind === 'video') {\n            removedTrack = mediaStream.getVideoTracks()[0];\n            if (updateLastConstraints) {\n                this.stream.lastVideoTrackConstraints = track.getConstraints();\n            }\n        } else {\n            removedTrack = mediaStream.getAudioTracks()[0];\n        }\n        mediaStream.removeTrack(removedTrack);\n        removedTrack.stop();\n        mediaStream.addTrack(track);\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}