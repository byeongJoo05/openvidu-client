{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OpenViduLogger = void 0;\nvar jsnlog_1 = require(\"jsnlog\");\nvar ConsoleLogger_1 = require(\"./ConsoleLogger\");\nvar OpenViduLoggerConfiguration_1 = require(\"./OpenViduLoggerConfiguration\");\nvar OpenViduLogger = /** @class */function () {\n  function OpenViduLogger() {\n    this.JSNLOG_URL = '/openvidu/elk/openvidu-browser-logs';\n    this.MAX_JSNLOG_BATCH_LOG_MESSAGES = 100;\n    this.MAX_MSECONDS_BATCH_MESSAGES = 5000;\n    this.MAX_LENGTH_STRING_JSON = 1000;\n    this.defaultConsoleLogger = new ConsoleLogger_1.ConsoleLogger(globalThis.console);\n    this.isProdMode = false;\n    this.isJSNLogSetup = false;\n  }\n  /**\n   * @hidden\n   */\n  OpenViduLogger.configureJSNLog = function (openVidu, token) {\n    var _this = this;\n    try {\n      // If dev mode or...\n      if (globalThis['LOG_JSNLOG_RESULTS'] ||\n      // If instance is created and it is OpenVidu Pro\n      this.instance && openVidu.isAtLeastPro &&\n      // If logs are enabled\n      this.instance.isOpenViduBrowserLogsDebugActive(openVidu) &&\n      // Only reconfigure it if session or finalUserId has changed\n      this.instance.canConfigureJSNLog(openVidu, this.instance)) {\n        // Check if app logs can be sent\n        // and replace console.log function to send\n        // logs of the application\n        if (openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug_app) {\n          this.instance.replaceWindowConsole();\n        }\n        // isJSNLogSetup will not be true until completed setup\n        this.instance.isJSNLogSetup = false;\n        this.instance.info('Configuring JSNLogs.');\n        var finalUserId_1 = openVidu.finalUserId;\n        var sessionId_1 = openVidu.session.sessionId;\n        var beforeSendCallback = function beforeSendCallback(xhr) {\n          // If 401 or 403 or 404 modify ready and status so JSNLog don't retry to send logs\n          // https://github.com/mperdeck/jsnlog.js/blob/v2.30.0/jsnlog.ts#L805-L818\n          var parentReadyStateFunction = xhr.onreadystatechange;\n          xhr.onreadystatechange = function () {\n            if (_this.isInvalidResponse(xhr)) {\n              Object.defineProperty(xhr, 'readyState', {\n                value: 4\n              });\n              Object.defineProperty(xhr, 'status', {\n                value: 200\n              });\n              // Disable JSNLog too to not send periodically errors\n              _this.instance.disableLogger();\n            }\n            parentReadyStateFunction();\n          };\n          // Headers to identify and authenticate logs\n          xhr.setRequestHeader('Authorization', 'Basic ' + btoa(\"\".concat(finalUserId_1, \"%/%\").concat(sessionId_1) + ':' + token));\n          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n          // Additional headers for OpenVidu\n          xhr.setRequestHeader('OV-Final-User-Id', finalUserId_1);\n          xhr.setRequestHeader('OV-Session-Id', sessionId_1);\n          xhr.setRequestHeader('OV-Token', token);\n        };\n        // Creation of the appender.\n        this.instance.currentAppender = jsnlog_1.JL.createAjaxAppender(\"appender-\".concat(finalUserId_1, \"-\").concat(sessionId_1));\n        this.instance.currentAppender.setOptions({\n          beforeSend: beforeSendCallback,\n          maxBatchSize: 1000,\n          batchSize: this.instance.MAX_JSNLOG_BATCH_LOG_MESSAGES,\n          batchTimeout: this.instance.MAX_MSECONDS_BATCH_MESSAGES\n        });\n        // Avoid circular dependencies\n        var logSerializer = function logSerializer(obj) {\n          var getCircularReplacer = function getCircularReplacer() {\n            var seen = new WeakSet();\n            return function (key, value) {\n              if (typeof value === 'object' && value != null) {\n                if (seen.has(value) || globalThis.HTMLElement && value instanceof HTMLElement) {\n                  return;\n                }\n                seen.add(value);\n              }\n              return value;\n            };\n          };\n          // Cut long messages\n          var stringifyJson = JSON.stringify(obj, getCircularReplacer());\n          if (stringifyJson.length > _this.instance.MAX_LENGTH_STRING_JSON) {\n            stringifyJson = \"\".concat(stringifyJson.substring(0, _this.instance.MAX_LENGTH_STRING_JSON), \"...\");\n          }\n          if (globalThis['LOG_JSNLOG_RESULTS']) {\n            console.log(stringifyJson);\n          }\n          return stringifyJson;\n        };\n        // Initialize JL to send logs\n        jsnlog_1.JL.setOptions({\n          defaultAjaxUrl: openVidu.httpUri + this.instance.JSNLOG_URL,\n          serialize: logSerializer,\n          enabled: true\n        });\n        (0, jsnlog_1.JL)().setOptions({\n          appenders: [this.instance.currentAppender]\n        });\n        this.instance.isJSNLogSetup = true;\n        this.instance.loggingSessionId = sessionId_1;\n        this.instance.info('JSNLog configured.');\n      }\n    } catch (e) {\n      // Print error\n      console.error('Error configuring JSNLog: ');\n      console.error(e);\n      // Restore defaults values just in case any exception happen-\n      this.instance.disableLogger();\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.getInstance = function () {\n    if (!OpenViduLogger.instance) {\n      OpenViduLogger.instance = new OpenViduLogger();\n    }\n    return OpenViduLogger.instance;\n  };\n  OpenViduLogger.isInvalidResponse = function (xhr) {\n    return xhr.status == 401 || xhr.status == 403 || xhr.status == 404 || xhr.status == 0;\n  };\n  OpenViduLogger.prototype.canConfigureJSNLog = function (openVidu, logger) {\n    return openVidu.session.sessionId != logger.loggingSessionId;\n  };\n  OpenViduLogger.prototype.isOpenViduBrowserLogsDebugActive = function (openVidu) {\n    return openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug || openVidu.sendBrowserLogs === OpenViduLoggerConfiguration_1.OpenViduLoggerConfiguration.debug_app;\n  };\n  // Return console functions with jsnlog integration\n  OpenViduLogger.prototype.getConsoleWithJSNLog = function () {\n    return function (openViduLogger) {\n      return {\n        log: function log() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          openViduLogger.defaultConsoleLogger.log.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().info(arguments);\n          }\n        },\n        info: function info() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          openViduLogger.defaultConsoleLogger.info.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().info(arguments);\n          }\n        },\n        debug: function debug() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          openViduLogger.defaultConsoleLogger.debug.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n        },\n        warn: function warn() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          openViduLogger.defaultConsoleLogger.warn.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().warn(arguments);\n          }\n        },\n        error: function error() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          openViduLogger.defaultConsoleLogger.error.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n          if (openViduLogger.isJSNLogSetup) {\n            (0, jsnlog_1.JL)().error(arguments);\n          }\n        }\n      };\n    }(this);\n  };\n  OpenViduLogger.prototype.replaceWindowConsole = function () {\n    globalThis.console = this.defaultConsoleLogger.logger;\n    globalThis.console.log = this.getConsoleWithJSNLog().log;\n    globalThis.console.info = this.getConsoleWithJSNLog().info;\n    globalThis.console.debug = this.getConsoleWithJSNLog().debug;\n    globalThis.console.warn = this.getConsoleWithJSNLog().warn;\n    globalThis.console.error = this.getConsoleWithJSNLog().error;\n  };\n  OpenViduLogger.prototype.disableLogger = function () {\n    jsnlog_1.JL.setOptions({\n      enabled: false\n    });\n    this.isJSNLogSetup = false;\n    this.loggingSessionId = undefined;\n    this.currentAppender = undefined;\n    globalThis.console = this.defaultConsoleLogger.logger;\n    globalThis.console.log = this.defaultConsoleLogger.log;\n    globalThis.console.info = this.defaultConsoleLogger.info;\n    globalThis.console.debug = this.defaultConsoleLogger.debug;\n    globalThis.console.warn = this.defaultConsoleLogger.warn;\n    globalThis.console.error = this.defaultConsoleLogger.error;\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.prototype.log = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this.isProdMode) {\n      this.defaultConsoleLogger.log.apply(this.defaultConsoleLogger.logger, arguments);\n    }\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().info(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.prototype.debug = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this.isProdMode) {\n      this.defaultConsoleLogger.debug.apply(this.defaultConsoleLogger.logger, arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.prototype.info = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this.isProdMode) {\n      this.defaultConsoleLogger.info.apply(this.defaultConsoleLogger.logger, arguments);\n    }\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().info(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this.defaultConsoleLogger.warn.apply(this.defaultConsoleLogger.logger, arguments);\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().warn(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this.defaultConsoleLogger.error.apply(this.defaultConsoleLogger.logger, arguments);\n    if (this.isJSNLogSetup) {\n      (0, jsnlog_1.JL)().error(arguments);\n    }\n  };\n  /**\n   * @hidden\n   */\n  OpenViduLogger.prototype.flush = function () {\n    if (this.isJSNLogSetup && this.currentAppender != null) {\n      this.currentAppender.sendBatch();\n    }\n  };\n  OpenViduLogger.prototype.enableProdMode = function () {\n    this.isProdMode = true;\n  };\n  return OpenViduLogger;\n}();\nexports.OpenViduLogger = OpenViduLogger;","map":{"version":3,"mappings":"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","names":["ConsoleLogger_1","globalThis","console","OpenViduLogger","openVidu","token","instance","isAtLeastPro","isOpenViduBrowserLogsDebugActive","canConfigureJSNLog","sendBrowserLogs","OpenViduLoggerConfiguration_1","debug_app","replaceWindowConsole","isJSNLogSetup","info","finalUserId_1","finalUserId","sessionId_1","session","sessionId","beforeSendCallback","xhr","parentReadyStateFunction","onreadystatechange","_this","isInvalidResponse","Object","defineProperty","value","disableLogger","setRequestHeader","btoa","currentAppender","jsnlog_1","createAjaxAppender","setOptions","beforeSend","maxBatchSize","batchSize","MAX_JSNLOG_BATCH_LOG_MESSAGES","batchTimeout","MAX_MSECONDS_BATCH_MESSAGES","logSerializer","obj","getCircularReplacer","seen","WeakSet","key","has","HTMLElement","add","stringifyJson","JSON","stringify","length","MAX_LENGTH_STRING_JSON","substring","log","defaultAjaxUrl","httpUri","JSNLOG_URL","serialize","enabled","appenders","loggingSessionId","e","error","status","logger","debug","openViduLogger","_i","args","defaultConsoleLogger","apply","arguments","warn","getConsoleWithJSNLog","undefined","isProdMode","sendBatch","exports"],"sources":["C:\\Users\\user\\Desktop\\openvidu-client\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Logger\\OpenViduLogger.ts"],"sourcesContent":["import { JL } from 'jsnlog';\nimport { OpenVidu } from '../../OpenVidu/OpenVidu';\nimport { ConsoleLogger } from './ConsoleLogger';\nimport { OpenViduLoggerConfiguration } from './OpenViduLoggerConfiguration';\n\nexport class OpenViduLogger {\n    private static instance: OpenViduLogger;\n\n    private JSNLOG_URL: string = '/openvidu/elk/openvidu-browser-logs';\n    private MAX_JSNLOG_BATCH_LOG_MESSAGES: number = 100;\n    private MAX_MSECONDS_BATCH_MESSAGES: number = 5000;\n    private MAX_LENGTH_STRING_JSON: number = 1000;\n\n    private defaultConsoleLogger: ConsoleLogger = new ConsoleLogger(globalThis.console);\n\n    private currentAppender: any;\n\n    private isProdMode = false;\n    private isJSNLogSetup = false;\n\n    // This two variables are used to restart JSNLog\n    // on different sessions and different userIds\n    private loggingSessionId: string | undefined;\n\n    /**\n     * @hidden\n     */\n    static configureJSNLog(openVidu: OpenVidu, token: string) {\n        try {\n            // If dev mode or...\n            if (\n                globalThis['LOG_JSNLOG_RESULTS'] ||\n                // If instance is created and it is OpenVidu Pro\n                (this.instance &&\n                    openVidu.isAtLeastPro &&\n                    // If logs are enabled\n                    this.instance.isOpenViduBrowserLogsDebugActive(openVidu) &&\n                    // Only reconfigure it if session or finalUserId has changed\n                    this.instance.canConfigureJSNLog(openVidu, this.instance))\n            ) {\n                // Check if app logs can be sent\n                // and replace console.log function to send\n                // logs of the application\n                if (openVidu.sendBrowserLogs === OpenViduLoggerConfiguration.debug_app) {\n                    this.instance.replaceWindowConsole();\n                }\n\n                // isJSNLogSetup will not be true until completed setup\n                this.instance.isJSNLogSetup = false;\n                this.instance.info('Configuring JSNLogs.');\n\n                const finalUserId = openVidu.finalUserId;\n                const sessionId = openVidu.session.sessionId;\n\n                const beforeSendCallback = (xhr) => {\n                    // If 401 or 403 or 404 modify ready and status so JSNLog don't retry to send logs\n                    // https://github.com/mperdeck/jsnlog.js/blob/v2.30.0/jsnlog.ts#L805-L818\n                    const parentReadyStateFunction = xhr.onreadystatechange;\n                    xhr.onreadystatechange = () => {\n                        if (this.isInvalidResponse(xhr)) {\n                            Object.defineProperty(xhr, 'readyState', { value: 4 });\n                            Object.defineProperty(xhr, 'status', { value: 200 });\n                            // Disable JSNLog too to not send periodically errors\n                            this.instance.disableLogger();\n                        }\n                        parentReadyStateFunction();\n                    };\n\n                    // Headers to identify and authenticate logs\n                    xhr.setRequestHeader('Authorization', 'Basic ' + btoa(`${finalUserId}%/%${sessionId}` + ':' + token));\n                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n                    // Additional headers for OpenVidu\n                    xhr.setRequestHeader('OV-Final-User-Id', finalUserId);\n                    xhr.setRequestHeader('OV-Session-Id', sessionId);\n                    xhr.setRequestHeader('OV-Token', token);\n                };\n\n                // Creation of the appender.\n                this.instance.currentAppender = JL.createAjaxAppender(`appender-${finalUserId}-${sessionId}`);\n                this.instance.currentAppender.setOptions({\n                    beforeSend: beforeSendCallback,\n                    maxBatchSize: 1000,\n                    batchSize: this.instance.MAX_JSNLOG_BATCH_LOG_MESSAGES,\n                    batchTimeout: this.instance.MAX_MSECONDS_BATCH_MESSAGES\n                });\n\n                // Avoid circular dependencies\n                const logSerializer = (obj): string => {\n                    const getCircularReplacer = () => {\n                        const seen = new WeakSet();\n                        return (key, value) => {\n                            if (typeof value === 'object' && value != null) {\n                                if (seen.has(value) || (globalThis.HTMLElement && value instanceof HTMLElement)) {\n                                    return;\n                                }\n                                seen.add(value);\n                            }\n                            return value;\n                        };\n                    };\n\n                    // Cut long messages\n                    let stringifyJson = JSON.stringify(obj, getCircularReplacer());\n                    if (stringifyJson.length > this.instance.MAX_LENGTH_STRING_JSON) {\n                        stringifyJson = `${stringifyJson.substring(0, this.instance.MAX_LENGTH_STRING_JSON)}...`;\n                    }\n\n                    if (globalThis['LOG_JSNLOG_RESULTS']) {\n                        console.log(stringifyJson);\n                    }\n\n                    return stringifyJson;\n                };\n\n                // Initialize JL to send logs\n                JL.setOptions({\n                    defaultAjaxUrl: openVidu.httpUri + this.instance.JSNLOG_URL,\n                    serialize: logSerializer,\n                    enabled: true\n                });\n                JL().setOptions({\n                    appenders: [this.instance.currentAppender]\n                });\n\n                this.instance.isJSNLogSetup = true;\n                this.instance.loggingSessionId = sessionId;\n                this.instance.info('JSNLog configured.');\n            }\n        } catch (e) {\n            // Print error\n            console.error('Error configuring JSNLog: ');\n            console.error(e);\n            // Restore defaults values just in case any exception happen-\n            this.instance.disableLogger();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    static getInstance(): OpenViduLogger {\n        if (!OpenViduLogger.instance) {\n            OpenViduLogger.instance = new OpenViduLogger();\n        }\n        return OpenViduLogger.instance;\n    }\n\n    private static isInvalidResponse(xhr: XMLHttpRequest) {\n        return xhr.status == 401 || xhr.status == 403 || xhr.status == 404 || xhr.status == 0;\n    }\n\n    private canConfigureJSNLog(openVidu: OpenVidu, logger: OpenViduLogger): boolean {\n        return openVidu.session.sessionId != logger.loggingSessionId;\n    }\n\n    private isOpenViduBrowserLogsDebugActive(openVidu: OpenVidu) {\n        return (\n            openVidu.sendBrowserLogs === OpenViduLoggerConfiguration.debug ||\n            openVidu.sendBrowserLogs === OpenViduLoggerConfiguration.debug_app\n        );\n    }\n\n    // Return console functions with jsnlog integration\n    private getConsoleWithJSNLog() {\n        return (function (openViduLogger: OpenViduLogger) {\n            return {\n                log: function (...args) {\n                    openViduLogger.defaultConsoleLogger.log.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                    if (openViduLogger.isJSNLogSetup) {\n                        JL().info(arguments);\n                    }\n                },\n                info: function (...args) {\n                    openViduLogger.defaultConsoleLogger.info.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                    if (openViduLogger.isJSNLogSetup) {\n                        JL().info(arguments);\n                    }\n                },\n                debug: function (...args) {\n                    openViduLogger.defaultConsoleLogger.debug.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                },\n                warn: function (...args) {\n                    openViduLogger.defaultConsoleLogger.warn.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                    if (openViduLogger.isJSNLogSetup) {\n                        JL().warn(arguments);\n                    }\n                },\n                error: function (...args) {\n                    openViduLogger.defaultConsoleLogger.error.apply(openViduLogger.defaultConsoleLogger.logger, arguments);\n                    if (openViduLogger.isJSNLogSetup) {\n                        JL().error(arguments);\n                    }\n                }\n            };\n        })(this);\n    }\n\n    private replaceWindowConsole() {\n        globalThis.console = this.defaultConsoleLogger.logger;\n        globalThis.console.log = this.getConsoleWithJSNLog().log;\n        globalThis.console.info = this.getConsoleWithJSNLog().info;\n        globalThis.console.debug = this.getConsoleWithJSNLog().debug;\n        globalThis.console.warn = this.getConsoleWithJSNLog().warn;\n        globalThis.console.error = this.getConsoleWithJSNLog().error;\n    }\n\n    private disableLogger() {\n        JL.setOptions({ enabled: false });\n        this.isJSNLogSetup = false;\n        this.loggingSessionId = undefined;\n        this.currentAppender = undefined;\n        globalThis.console = this.defaultConsoleLogger.logger;\n        globalThis.console.log = this.defaultConsoleLogger.log;\n        globalThis.console.info = this.defaultConsoleLogger.info;\n        globalThis.console.debug = this.defaultConsoleLogger.debug;\n        globalThis.console.warn = this.defaultConsoleLogger.warn;\n        globalThis.console.error = this.defaultConsoleLogger.error;\n    }\n\n    /**\n     * @hidden\n     */\n    log(...args: any[]) {\n        if (!this.isProdMode) {\n            this.defaultConsoleLogger.log.apply(this.defaultConsoleLogger.logger, arguments);\n        }\n        if (this.isJSNLogSetup) {\n            JL().info(arguments);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    debug(...args: any[]) {\n        if (!this.isProdMode) {\n            this.defaultConsoleLogger.debug.apply(this.defaultConsoleLogger.logger, arguments);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    info(...args: any[]) {\n        if (!this.isProdMode) {\n            this.defaultConsoleLogger.info.apply(this.defaultConsoleLogger.logger, arguments);\n        }\n        if (this.isJSNLogSetup) {\n            JL().info(arguments);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    warn(...args: any[]) {\n        this.defaultConsoleLogger.warn.apply(this.defaultConsoleLogger.logger, arguments);\n        if (this.isJSNLogSetup) {\n            JL().warn(arguments);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    error(...args: any[]) {\n        this.defaultConsoleLogger.error.apply(this.defaultConsoleLogger.logger, arguments);\n        if (this.isJSNLogSetup) {\n            JL().error(arguments);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    flush() {\n        if (this.isJSNLogSetup && this.currentAppender != null) {\n            this.currentAppender.sendBatch();\n        }\n    }\n\n    enableProdMode() {\n        this.isProdMode = true;\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}