{"ast":null,"code":"\"use strict\";\n\n/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SessionDisconnectedEvent = void 0;\nvar Event_1 = require(\"./Event\");\nvar OpenViduLogger_1 = require(\"../Logger/OpenViduLogger\");\n/**\n * @hidden\n */\nvar logger = OpenViduLogger_1.OpenViduLogger.getInstance();\n/**\n * Triggered by {@link SessionEventMap.sessionDisconnected}\n */\nvar SessionDisconnectedEvent = /** @class */function (_super) {\n  __extends(SessionDisconnectedEvent, _super);\n  /**\n   * @hidden\n   */\n  function SessionDisconnectedEvent(target, reason) {\n    var _this = _super.call(this, true, target, 'sessionDisconnected') || this;\n    _this.reason = reason;\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  SessionDisconnectedEvent.prototype.callDefaultBehavior = function () {\n    logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Session'\");\n    var session = this.target;\n    // Dispose and delete all remote Connections\n    session.remoteConnections.forEach(function (remoteConnection) {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n      var connectionId = remoteConnection.connectionId;\n      if (!!((_a = session.remoteConnections.get(connectionId)) === null || _a === void 0 ? void 0 : _a.stream)) {\n        (_b = session.remoteConnections.get(connectionId)) === null || _b === void 0 ? void 0 : _b.stream.disposeWebRtcPeer();\n        (_c = session.remoteConnections.get(connectionId)) === null || _c === void 0 ? void 0 : _c.stream.disposeMediaStream();\n        if ((_d = session.remoteConnections.get(connectionId)) === null || _d === void 0 ? void 0 : _d.stream.streamManager) {\n          (_e = session.remoteConnections.get(connectionId)) === null || _e === void 0 ? void 0 : _e.stream.streamManager.removeAllVideos();\n        }\n        var streamId = (_g = (_f = session.remoteConnections.get(connectionId)) === null || _f === void 0 ? void 0 : _f.stream) === null || _g === void 0 ? void 0 : _g.streamId;\n        if (!!streamId) {\n          session.remoteStreamsCreated.delete(streamId);\n        }\n        (_h = session.remoteConnections.get(connectionId)) === null || _h === void 0 ? void 0 : _h.dispose();\n      }\n      session.remoteConnections.delete(connectionId);\n    });\n  };\n  return SessionDisconnectedEvent;\n}(Event_1.Event);\nexports.SessionDisconnectedEvent = SessionDisconnectedEvent;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;AAEA;AAGA;;;AAGA,IAAMA,MAAM,GAAmBC,+BAAc,CAACC,WAAW,EAAE;AAE3D;;;AAGA;EAA8CC;EAe1C;;;EAGA,kCAAYC,MAAe,EAAEC,MAA6B;IAA1D,YACIC,kBAAM,IAAI,EAAEF,MAAM,EAAE,qBAAqB,CAAC;IAC1CG,KAAI,CAACF,MAAM,GAAGA,MAAM;;EACxB;EAEA;;;EAGAG,sDAAmB,GAAnB;IACIR,MAAM,CAACS,IAAI,CAAC,iCAAiC,GAAG,IAAI,CAACC,IAAI,GAAG,iCAAiC,CAAC;IAE9F,IAAMC,OAAO,GAAY,IAAI,CAACP,MAAM;IAEpC;IACAO,OAAO,CAACC,iBAAiB,CAACC,OAAO,CAAC,UAACC,gBAAgB;;MAC/C,IAAMC,YAAY,GAAGD,gBAAgB,CAACC,YAAY;MAClD,IAAI,CAAC,EAAC,aAAO,CAACH,iBAAiB,CAACI,GAAG,CAACD,YAAY,CAAC,0CAAEE,MAAM,GAAE;QACvD,aAAO,CAACL,iBAAiB,CAACI,GAAG,CAACD,YAAY,CAAC,0CAAEE,MAAM,CAAEC,iBAAiB,EAAE;QACxE,aAAO,CAACN,iBAAiB,CAACI,GAAG,CAACD,YAAY,CAAC,0CAAEE,MAAM,CAAEE,kBAAkB,EAAE;QACzE,IAAI,aAAO,CAACP,iBAAiB,CAACI,GAAG,CAACD,YAAY,CAAC,0CAAEE,MAAM,CAAEG,aAAa,EAAE;UACpE,aAAO,CAACR,iBAAiB,CAACI,GAAG,CAACD,YAAY,CAAC,0CAAEE,MAAM,CAAEG,aAAa,CAACC,eAAe,EAAE;;QAExF,IAAMC,QAAQ,GAAG,mBAAO,CAACV,iBAAiB,CAACI,GAAG,CAACD,YAAY,CAAC,0CAAEE,MAAM,0CAAEK,QAAQ;QAC9E,IAAI,CAAC,CAACA,QAAQ,EAAE;UACZX,OAAO,CAACY,oBAAoB,CAACC,MAAM,CAACF,QAAQ,CAAC;;QAEjD,aAAO,CAACV,iBAAiB,CAACI,GAAG,CAACD,YAAY,CAAC,0CAAEU,OAAO,EAAE;;MAE1Dd,OAAO,CAACC,iBAAiB,CAACY,MAAM,CAACT,YAAY,CAAC;IAClD,CAAC,CAAC;EACN,CAAC;EACL,+BAAC;AAAD,CAAC,CAjD6CW,aAAK;AAAtCC","names":["logger","OpenViduLogger_1","getInstance","__extends","target","reason","_super","_this","SessionDisconnectedEvent","info","type","session","remoteConnections","forEach","remoteConnection","connectionId","get","stream","disposeWebRtcPeer","disposeMediaStream","streamManager","removeAllVideos","streamId","remoteStreamsCreated","delete","dispose","Event_1","exports"],"sources":["C:\\Users\\user\\Desktop\\openvidu-client\\node_modules\\openvidu-browser\\src\\OpenViduInternal\\Events\\SessionDisconnectedEvent.ts"],"sourcesContent":["/*\n * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Event } from './Event';\nimport { Session } from '../../OpenVidu/Session';\nimport { OpenViduLogger } from '../Logger/OpenViduLogger';\nimport { ConnectionEventReason } from './Types/Types';\n\n/**\n * @hidden\n */\nconst logger: OpenViduLogger = OpenViduLogger.getInstance();\n\n/**\n * Triggered by {@link SessionEventMap.sessionDisconnected}\n */\nexport class SessionDisconnectedEvent extends Event {\n    /**\n     * - \"disconnect\": you have called `Session.disconnect()`\n     * - \"forceDisconnectByUser\": you have been evicted from the Session by other user calling `Session.forceDisconnect()`\n     * - \"forceDisconnectByServer\": you have been evicted from the Session by the application\n     * - \"sessionClosedByServer\": the Session has been closed by the application\n     * - \"networkDisconnect\": your network connection has dropped. Before a SessionDisconnectedEvent with this reason is triggered,\n     *      Session object will always have previously dispatched a `reconnecting` event. If the reconnection process succeeds,\n     *      Session object will dispatch a `reconnected` event. If it fails, Session object will dispatch a SessionDisconnectedEvent\n     *      with reason \"networkDisconnect\"\n     * - \"nodeCrashed\": a node has crashed in the server side. You can use this reason to ask your application's backend to reconnect\n     * to a new session to replace the crashed one\n     */\n    reason: ConnectionEventReason;\n\n    /**\n     * @hidden\n     */\n    constructor(target: Session, reason: ConnectionEventReason) {\n        super(true, target, 'sessionDisconnected');\n        this.reason = reason;\n    }\n\n    /**\n     * @hidden\n     */\n    callDefaultBehavior() {\n        logger.info(\"Calling default behavior upon '\" + this.type + \"' event dispatched by 'Session'\");\n\n        const session = <Session>this.target;\n\n        // Dispose and delete all remote Connections\n        session.remoteConnections.forEach((remoteConnection) => {\n            const connectionId = remoteConnection.connectionId;\n            if (!!session.remoteConnections.get(connectionId)?.stream) {\n                session.remoteConnections.get(connectionId)?.stream!.disposeWebRtcPeer();\n                session.remoteConnections.get(connectionId)?.stream!.disposeMediaStream();\n                if (session.remoteConnections.get(connectionId)?.stream!.streamManager) {\n                    session.remoteConnections.get(connectionId)?.stream!.streamManager.removeAllVideos();\n                }\n                const streamId = session.remoteConnections.get(connectionId)?.stream?.streamId;\n                if (!!streamId) {\n                    session.remoteStreamsCreated.delete(streamId);\n                }\n                session.remoteConnections.get(connectionId)?.dispose();\n            }\n            session.remoteConnections.delete(connectionId);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}